image: python:3.11-slim

variables:
  PIP_CACHE_DIR: "$CI_PROJECT_DIR/.cache/pip"

cache:
  paths:
    - .cache/pip
    - venv/

stages:
  - build
  - test
  - release
  - deploy

build:
  stage: build
  script:
    - ci/virtual-env.sh
    - source venv/bin/activate
    - ci/build-install.sh
    - pip -V
    - pip show -f vja
  artifacts:
    paths:
      - dist/*.whl
  rules:
    # Exclude semantic-release commits when on $CI_DEFAULT_BRANCH of
    - if: '$CI_COMMIT_BRANCH == $CI_DEFAULT_BRANCH && $CI_COMMIT_MESSAGE =~ /^release: Release/'
      when: never
    - when: always

pylint:
  stage: test
  allow_failure: true
  script:
    - source venv/bin/activate
    - flake8 --max-line-length=120 vja/*.py || true
    - pylint -d C0103,C0114,C0115,C0116,C0301 --fail-under=9 vja/*.py
  rules:
    # Exclude semantic-release commits when on $CI_DEFAULT_BRANCH of
    - if: '$CI_COMMIT_BRANCH == $CI_DEFAULT_BRANCH && $CI_COMMIT_MESSAGE =~ /^release: Release/'
      when: never
    - when: on_success

integration-test:
  stage: test
  image:
    name: docker:stable
  services:
    - name: docker:dind
  variables:
    DOCKER_DRIVER: overlay2
    DOCKER_TLS_CERTDIR: ""
  script:
    - docker --version
    - apk add --no-cache bash curl python3-dev py3-pip docker-compose
    - pip3 install wheel
    - pip3 install pytest
    - pip3 install coverage
    - python3 --version

    - pip install dist/*.whl
    - pip show vja
    - which vja

    - docker-compose -f tests/docker-compose.yml up -d api
    - export VJA_CONFIGDIR=tests/.vjatest_dind
    - tests/run.sh test
    - coverage run --omit='*test*' -m pytest
    - coverage report --omit='*test*'
    - coverage xml --omit='*test*'
    - docker-compose -f tests/docker-compose.yml down
  coverage: '/(?i)total.*? (100(?:\.0+)?\%|[1-9]?\d(?:\.\d+)?\%)$/'
  cache: { }
  artifacts:
    reports:
      coverage_report:
        coverage_format: cobertura
        path: coverage.xml
  rules:
    # Exclude semantic-release commits when on $CI_DEFAULT_BRANCH of
    - if: '$CI_COMMIT_BRANCH == $CI_DEFAULT_BRANCH && $CI_COMMIT_MESSAGE =~ /^release: Release/'
      when: never
    - when: on_success

release:
  image: node:lts-slim
  stage: release
  variables:
    PYPI_USERNAME: __token__
    PYPI_TOKEN: ${PYPI_VJA_TOKEN}
  before_script:
    - apt-get update && apt-get install -y --no-install-recommends git-core ca-certificates python-is-python3 python3-pip
    - npm install -g semantic-release @semantic-release/gitlab @semantic-release/changelog conventional-changelog-conventionalcommits @semantic-release/commit-analyzer @semantic-release/git semantic-release-pypi
    - pip install -r requirements_dev.txt
  script:
    - semantic-release
  cache: { }
  rules:
    # Exclude semantic-release commits when on $CI_DEFAULT_BRANCH of
    - if: '$CI_COMMIT_BRANCH == $CI_DEFAULT_BRANCH && $CI_COMMIT_MESSAGE =~ /^release: Release/'
      when: never
    - if: $CI_COMMIT_BRANCH == $CI_DEFAULT_BRANCH
      when: manual

deploy:
  stage: deploy
  variables:
    TWINE_NON_INTERACTIVE: "true"
    TWINE_USERNAME: __token__
    TWINE_PASSWORD: ${PYPI_VJA_TOKEN}
  script:
    - source venv/bin/activate
    - VERSION=$(vja --version | cut -d ' ' -f 3)
    - echo "VERSION=$VERSION"
    - echo "CI_COMMIT_TAG=$CI_COMMIT_TAG"
    - |
      if [[ "$CI_COMMIT_TAG" != *"$VERSION" ]]
      then
        echo "Version number and git tag do not match!"
        exit 1
      fi
    - ls -l dist/*
    - twine upload --verbose dist/*
  only:
    - tags

